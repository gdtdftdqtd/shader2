// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        color: {value: [1,1,255,255] ,editor: {type: color} }
        size: {value: [960,640]}
        radius: {value: 50}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform myData{
    vec4 color;

    vec2 clickPos;
    vec2 size;
    float radius;
    float clickTime;
  };

  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 a_color = v_color;

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif
    
    float dis = radius * (sin(  5.0*(cc_time.x - clickTime/1000.0) ) + 1.0)/2.0;
    // float dis = radius * (sin(cc_time.y) + 1.0)/2.0;

    float posX = clickPos.x / size.x;
    float posY = clickPos.y / size.y;

    if(distance(v_uv0*size,clickPos ) < dis/2.0  ){
      // a_color = normalize(color) ;
    }else if(distance(v_uv0*size,clickPos) < dis){
      a_color *= normalize(color);
    }




    o *= a_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
